--Functions and Stored Procedures

--01. Employees with Salary Above 35000
/*Create stored procedure usp_GetEmployeesSalaryAbove35000 that returns all employees' first and last names, whose salary above 35000. */
--use SoftUni1
--go

create proc usp_GetEmployeesSalaryAbove35000 (@minSalary money = 35000)
as
	select firstName, LastName
	from Employees
	where Salary > @minSalary

--exec usp_GetEmployeesSalaryAbove35000
--exec
--alter
--drop

--02. Employees with Salary Above Number
/*Create a stored procedure usp_GetEmployeesSalaryAboveNumber that accepts a number (of type DECIMAL(18,4)) as parameter and returns all employees' first and last names,
whose salary is above or equal to the given number. 
*/
create or alter proc usp_GetEmployeesSalaryAboveNumber (@minSalary DECIMAL(18,4))
as
	select firstName, LastName
	from Employees
	where Salary >= @minSalary

--exec usp_GetEmployeesSalaryAboveNumber 48100

--3.	Town Names Starting With
--Create a stored procedure usp_GetTownsStartingWith that accepts a string as parameter and returns all town names starting with that string. 

create or alter proc usp_GetTownsStartingWith (@FirsLetter nvarchar(max))
as
	select t.Name from Towns t
	where Left(t.Name, len(@FirsLetter)) = @FirsLetter

	exec usp_GetTownsStartingWith bo

--4. Employees from Town
--Create a stored procedure usp_GetEmployeesFromTown that accepts town name as parameter and returns the first and last name of those employees, who live in the given town. 

create or alter proc usp_GetEmployeesFromTown (@cityName nvarchar(max))
as
select FirstName, LastName from Employees e
join Addresses a on a.AddressID = e.AddressID
join Towns t on t.TownID = a.TownID
where t.Name = @cityName

exec usp_GetEmployeesFromTown Sofia

--5. Salary Level Function
/*Create a function ufn_GetSalaryLevel(@salary DECIMAL(18,4)) that receives salary of an employee and returns the level of the salary.
If salary is < 30000, return "Low"
If salary is between 30000 and 50000 (inclusive), return "Average"
If salary is > 50000, return "High"*/

Create function ufn_GetSalaryLevel(@salary money)
returns nvarchar(10)
as
begin
	declare @salaryLevel varchar(10)
	set @salaryLevel = 'High'
	if (@salary < 30000)
		set @salaryLevel = 'Low'
	else if (@salary between 30000 and 50000)
		set @salaryLevel = 'Average'
	return @salaryLevel
end

select *, 
dbo.ufn_GetSalaryLevel(Salary)  as 'Salary Level'
from Employees

--6.Employees by Salary Level
/*Create a stored procedure usp_EmployeesBySalaryLevel
that receives as parameter level of salary (low, average, or high) and print the names of all employees,
who have the given level of salary. 
You should use the function - "dbo.ufn_GetSalaryLevel(@Salary)", 
which was part of the previous task, inside your "CREATE PROCEDURE …" query.*/

create proc usp_EmployeesBySalaryLevel (@SalaryRange varchar(7))
as
select FirstName, LastName from Employees
where dbo.ufn_GetSalaryLevel(Salary) = @SalaryRange

exec usp_EmployeesBySalaryLevel High

--7. Define Function
--Define a function ufn_IsWordComprised(@setOfLetters, @word) 
--that returns true or false, depending on that if the word is comprised of the given set of letters

CREATE OR ALTER FUNCTION ufn_IsWordComprised(@setOfLetters VARCHAR(20), @word VARCHAR(20)) 
RETURNS BIT
AS
BEGIN
    DECLARE @i INT = 1;
    DECLARE @Checker BIT = 0;
 
    WHILE @i <= LEN(@word)
    BEGIN
        DECLARE @SetLetter CHAR(1) = SUBSTRING(@word, @i, 1);
 
        DECLARE @j INT = 1;
 
        WHILE @j <= LEN(@setOfLetters)
        BEGIN
            DECLARE @WordLetter CHAR(1) = SUBSTRING(@setOfLetters, @j, 1);
 
            IF @SetLetter = @WordLetter
            BEGIN
                SET @Checker = 1;
                BREAK;
            END
            SET @j += 1;
            SET @Checker = 0;
        END
 
        IF(@Checker = 0)
            RETURN 0;
        SET @i +=1;
    END
 
    RETURN 1;
END

--8. Delete Employees and Departments
/* Create a procedure with the name usp_DeleteEmployeesFromDepartment (@departmentId INT)
which deletes all Employees from a given department. 
Delete these departments from the Departments table too. 
Finally, SELECT the number of employees from the given department. 
If the delete statements are correct the select query should return 0.
After completing that exercise restore your database to revert all changes.*/

CREATE PROC usp_DeleteEmployeesFromDepartment (@departmentId INT)
AS

DECLARE @empIDsToBeDeleted TABLE
(
Id int
)

INSERT INTO @empIDsToBeDeleted
SELECT e.EmployeeID
FROM Employees AS e
WHERE e.DepartmentID = @departmentId

ALTER TABLE Departments
ALTER COLUMN ManagerID int NULL

DELETE FROM EmployeesProjects
WHERE EmployeeID IN (SELECT Id FROM @empIDsToBeDeleted)

UPDATE Employees
SET ManagerID = NULL
WHERE ManagerID IN (SELECT Id FROM @empIDsToBeDeleted)

UPDATE Departments
SET ManagerID = NULL
WHERE ManagerID IN (SELECT Id FROM @empIDsToBeDeleted)

DELETE FROM Employees
WHERE EmployeeID IN (SELECT Id FROM @empIDsToBeDeleted)

DELETE FROM Departments
WHERE DepartmentID = @departmentId 

SELECT COUNT(*) AS [Employees Count] FROM Employees AS e
JOIN Departments AS d
ON d.DepartmentID = e.DepartmentID
WHERE e.DepartmentID = @departmentId


--9.	Find Full Name
/*You are given a database schema with tables AccountHolders(Id (PK), FirstName, LastName, SSN) and Accounts(Id (PK), AccountHolderId (FK), Balance).
Write a stored procedure usp_GetHoldersFullName that selects the full name of all people. */

--AccountHolders(Id (PK), FirstName, LastName, SSN)
--Accounts(Id (PK), AccountHolderId (FK), Balance)

create proc usp_GetHoldersFullName
as
begin
	select concat(FirstName, ' ', LastName) from AccountHolders
end

exec usp_GetHoldersFullName


--10.	People with Balance Higher Than
/*Your task is to create a stored procedure usp_GetHoldersWithBalanceHigherThan that accepts a number as a parameter and returns all the people,
who have more money in total in all their accounts than the supplied number. 
Order them by their first name, then by their last name.*/

create procedure usp_GetHoldersWithBalanceHigherThan (@balanceHigherThan money)
as
begin
select FirstName, LastName
from (
select FirstName, LastName, sum(a.Balance) as balance
 from AccountHolders ah
join Accounts a on ah.Id = a.AccountHolderId
group by FirstName, LastName
) b
where balance > @balanceHigherThan
order by FirstName, LastName
end

exec usp_GetHoldersWithBalanceHigherThan 25000

--	Future Value Function
/*Your task is to create a function ufn_CalculateFutureValue that accepts as parameters – sum (decimal), yearly interest rate (float), and the number of years (int).
It should calculate and return the future value of the initial sum rounded up to the fourth digit after the decimal delimiter. 
Use the following formula:
FV=I*((1+R)^T)
	I – Initial sum
	R – Yearly interest rate
	T – Number of years
*/

create or alter function ufn_CalculateFutureValue (@sum money, @yearlyInterestRate float, @numberOfYears int)
returns money
as
begin
	RETURN @sum * POWER(1+@yearlyInterestRate,@numberOfYears)
end

--12. Calculating Interest
/*Your task is to create a stored procedure usp_CalculateFutureValueForAccount that uses the function from the previous problem to give an interest to a person's account for 5 years,
along with information about their account id, first name, last name and current balance as it is shown in the example below. 
It should take the AccountId and the interest rate as parameters.
Again, you are provided with the dbo.ufn_CalculateFutureValue function, which was part of the previous task. */

create procedure usp_CalculateFutureValueForAccount (@accountID int, @Rate float)
as
begin
	declare @sum money = (select balance from Accounts where id = @accountID)
	select a.Id as 'Account Id', ah.firstName as 'First Name', ah.LastName as 'Last Name', a.Balance as 'Current Balance', 
	dbo.ufn_CalculateFutureValue (@sum, @Rate, 5) as 'Balance in 5 years'
	from AccountHolders ah
	join Accounts a on a.AccountHolderId = ah.Id 
	where a.Id = @accountID
end

exec usp_CalculateFutureValueForAccount 1, 0.1


--13.	*Scalar Function: Cash in User Games Odd Rows
/*Create a function ufn_CashInUsersGames that sums the cash of the odd rows. Rows must be ordered by cash in descending order. 
The function should take a game name as a parameter and return the result as a table. Submit only your function in.
Execute the function over the following game names, ordered exactly like: "Love in a mist".*/

create function ufn_CashInUsersGames (@gameName varchar(50))
returns table
as return
	select sum(a.cash) as 'SumCash'
	from (
	select g.Name, ROW_NUMBER() over(partition by g.Name order by cash desc) as rowNumber, cash 
	from [dbo].[UsersGames] u
	join [dbo].[Games] g on u.GameId = g.Id 
	and g.Name = @gameName
	) as a
	where a.rowNumber % 2 > 0




