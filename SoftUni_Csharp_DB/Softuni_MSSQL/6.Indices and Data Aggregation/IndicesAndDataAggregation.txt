--Indices and Data Aggregation

--01. Records’ Count
--Import the database and send the total count of records from the one and only table to Mr. Bodrog. 
--Make sure nothing gets lost.

select count(*) as 'Count' from WizzardDeposits


--02. Longest Magic Wand
--Select the size of the longest magic wand. Rename the new column appropriately.
select MAX(MagicWandSize) as 'LongestMagicWand' from WizzardDeposits


--3. Longest Magic Wand Per Deposit Groups
--For wizards in each deposit group show the longest magic wand. Rename the new column appropriately.

select DepositGroup, MAX(MagicWandSize) as 'LongestMagicWand' 
from WizzardDeposits
group by DepositGroup


--04. Smallest Deposit Group per Magic Wand Size
--Select the two deposit groups with the lowest average wand size.

select top(2) DepositGroup 
from WizzardDeposits
group by DepositGroup
order by AVG(MagicWandSize)


--05. Deposits Sum
--Select all deposit groups and their total deposit sums.

select DepositGroup, SUM(DepositAmount) as 'TotalSum' from WizzardDeposits
group by DepositGroup

--6. Deposits Sum for Ollivander Family
--Select all deposit groups and their total deposit sums, but only for the wizards, who have their magic wands crafted by the Ollivander family.

select DepositGroup, SUM(DepositAmount) as 'TotalSum' from WizzardDeposits
where MagicWandCreator = 'Ollivander family'
group by DepositGroup

--07. Deposits Filter
--Select all deposit groups and their total deposit sums, but only for the wizards, who have their magic wands crafted by the Ollivander family. 
--Filter total deposit amounts lower than 150000. Order by total deposit amount in descending order.

select DepositGroup, SUM(DepositAmount) as 'TotalSum' from WizzardDeposits
where MagicWandCreator = 'Ollivander family'
group by DepositGroup
having SUM(DepositAmount) < 150000
order by TotalSum desc

--08. Deposit Charge

select DepositGroup, MagicWandCreator, MIN(DepositCharge) as 'MinDepositCharge' from WizzardDeposits
group by DepositGroup, MagicWandCreator
order by MagicWandCreator, DepositGroup

--09. Age Groups

/*Write down a query that creates 7 different groups based on their age.
Age groups should be as follows:
[0-10]
[11-20]
[21-30]
[31-40]
[41-50]
[51-60]
[61+]
The query should return
Age groups
Count of wizards in it*/


--AgeGroup	WizardCount
select AgeGroup, Count(*) as [WizardCount] from
(
select Age,
case
	when Age between 0 and 10 then '[0-10]'
	when Age between 11 and 20 then '[11-20]'
	when Age between 21 and 30 then '[21-30]'
	when Age between 31 and 40 then '[31-40]'
	when Age between 41 and 50 then '[41-50]'
	when Age between 51 and 60 then '[51-60]'
	when Age >= 61 then '[61+]'
END as [AgeGroup]
from WizzardDeposits) as [SubQueryAge]
group by AgeGroup

--10. First Letter
--Create a query that returns all the unique wizard first letters of their first names only if they have deposit of type Troll Chest.
--Order them alphabetically.
--Use GROUP BY for uniqueness.

select left(FirstName, 1) as FirstLetter from WizzardDeposits
where DepositGroup = 'Troll Chest'
group by left(FirstName, 1)
order by FirstLetter

--11. Average Interest
--DepositGroup	IsDepositExpired	AverageInterest
/* 
He wants to know the average interest of all deposit groups, split by whether the deposit has expired or not. 
But that's not all. He wants you to select deposits with start date after 01/01/1985. 
Order the data descending by Deposit Group and ascending by Expiration Flag.*/

select DepositGroup, IsDepositExpired, AVG(DepositInterest) as AverageInterest
from WizzardDeposits
where DepositStartDate > '1985-01-01'
group by DepositGroup, IsDepositExpired 
--having DepositStartDate > '01/01/1985'
order by DepositGroup desc, IsDepositExpired asc

--12. *Rich Wizard, Poor Wizard
select * from WizzardDeposits
--You compare the deposits of every wizard with the wizard after him. 
--If a wizard is the last one in the database, simply ignore it. 
--In the end you have to sum the difference between the deposits.
select sum(n.Difference) as SumDifference
from
(
select 
a.FirstName as 'Host Wizard', a.DepositAmount as 'Host Wizard Deposit', b.FirstName as 'Guest Wizard', b.DepositAmount as 'Guest Wizard Deposit', 
a.DepositAmount - b.DepositAmount as 'Difference'
from WizzardDeposits a
join WizzardDeposits b on a.Id = b.Id - 1) n


--13. Departments Total Salaries
--Create a query that shows the total sum of salaries for each department. 
--Order them by DepartmentID.
--Your query should return: DepartmentID
select e.DepartmentID, sum(salary) as TotalSalary
from Employees e
group by e.DepartmentID
order by DepartmentID


--14. Employees Minimum Salaries
/*Select the minimum salary from the employees for departments with ID (2, 5, 7) but only for those, hired after 01/01/2000.
Your query should return: DepartmentID
*/
select * from Employees

select e.DepartmentID, min(salary) as MinimumSalary
from Employees e
where DepartmentID in (2, 5, 7)
and HireDate > '2000-01-01'
group by e.DepartmentID

--15. Employees Average Salaries
/*Select all employees who earn more than 30000 into a new table. 
Then delete all employees who have ManagerID = 42 (in the new table). 
Then increase the salaries of all employees with DepartmentID = 1 by 5000. 
Finally, select the average salaries in each department.*/

--29 rows
select * into 
NewTableEmployees
from Employees
where salary > 30000

select * 
--delete
from NewTableEmployees
where ManagerId = 42
--3rows

select * from 
--update
NewTableEmployees
--set salary = salary+5000
where DepartmentID = 1
--6rows

select DepartmentID, avg(salary) as AverageSalary from NewTableEmployees
group by DepartmentID

--16. Employees Maximum Salaries
--Find the max salary for each department. Filter those, which have max salaries NOT in the range 30000 – 70000.
select DepartmentID, max(salary) as	MaxSalary from Employees
group by DepartmentID
having max(salary) < 30000 or max(salary) > 70000


--17. Employees Count Salaries
--Count the salaries of all employees, who don’t have a manager.
select count(*) as 'Count' from Employees
where ManagerID is NULL

--18. *3rd Highest Salary
--Find the third highest salary in each department if there is such. 
--DepartmentID	ThirdHighestSalary

--Salary as 'ThirdHighestSalary'
select distinct DepartmentID, Salary as 'ThirdHighestSalary' from(
select *, Dense_RANK() over(Partition by DepartmentID order by salary desc) Ranking
from Employees ) a
where a.Ranking = 3

--19. **Salary Challenge
/*Create a query that returns:
FirstName, LastName, DepartmentID
Select all employees who have salary higher than the average salary of their respective departments. Select only the first 10 rows. Order them by DepartmentID.*/
select top 10 e.FirstName, e.LastName, e.DepartmentID from( 
select DepartmentID, avg(Salary) as AvgSalary
from Employees
group by DepartmentID ) a
join Employees e on a.DepartmentID = e.DepartmentID
where Salary > AvgSalary
order by e.DepartmentID